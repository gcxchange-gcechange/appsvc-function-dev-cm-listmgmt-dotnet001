# Security Scan

trigger: none

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  DOTNET_VERSION: '8.x'

stages:
- stage: SecurityScans
  displayName: Security Scans
  jobs:
  - job: RunScans
    displayName: Run Semgrep, Gitleaks, Dependency-Check
    steps:

    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: sdk
        version: $(DOTNET_VERSION)

    - checkout: self

    - script: |
        dotnet restore
      displayName: 'Restore NuGet Packages'

    # SEMGREP
    - script: |
        pip install semgrep
      displayName: 'Install Semgrep'

    - script: |
        semgrep scan --config auto --error
      displayName: 'Run Semgrep Scan'

    # DEPENDENCY-CHECK via Docker
    - script: |
        docker run --rm \
          -e NVD_API_KEY=$(NVD_API_KEY) \
          -v $(Build.SourcesDirectory):/src \
          -v $(Build.ArtifactStagingDirectory):/report \
          owasp/dependency-check:12.1.0 \
          --project "AzureFunctionApp" \
          --scan /src \
          --format HTML \
          --enableRetired \ # Microsoft.* NuGet dependencies are ignored, so we need this 
          --failOnCVSS 11 \ # ... and this. Since there is nothing to scan in this case, it won't fail.
          --out /report \
          --log /report/debug.log
      displayName: 'Run OWASP Dependency-Check via Docker'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Dependency-Check Report'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'DependencyReport'

    # GITLEAKS
    - script: |
        curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
        chmod +x gitleaks
        sudo mv gitleaks /usr/local/bin
      displayName: 'Install Gitleaks'

    - script: |
        gitleaks detect --source $(Build.SourcesDirectory) --report-path $(Build.ArtifactStagingDirectory)/gitleaks-report.json --no-banner
      displayName: 'Run Gitleaks'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Gitleaks Report'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/gitleaks-report.json'
        ArtifactName: 'GitleaksReport'

    # OWASP ZAP (optional, requires accessible endpoint)
    - script: |
        docker run -v $(Build.SourcesDirectory):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \
          -t https://your-function-url.azurewebsites.net \
          -r zap-report.html
      displayName: 'Run ZAP Baseline Scan'
      condition: false  # Change to 'true' or remove this line to enable

    - task: PublishBuildArtifacts@1
      displayName: 'Publish ZAP Report'
      condition: false
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/zap-report.html'
        ArtifactName: 'ZAPReport'
